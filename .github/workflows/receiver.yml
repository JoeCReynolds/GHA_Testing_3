# This is an example of sending a POST request using curl to trigger a repo dispatch
# Replace <token>, <user>, <repo>
# curl -H "Authorization: token <token>" \
#     -H 'Accept: application/vnd.github.everest-preview+json' \
#     "https://api.github.com/repos/<user>/<repo>/dispatches" \
#     -d '{"event_type": "build", "client_payload": {"key": "value"}}'

name: Receive Dispatch

on:
  repository_dispatch:
    types: [update_3]

jobs:
  Receive_Workflow_Trigger:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v2

      - uses: actions/setup-java@v2
        name: Setup Java
        with:
          java-version: 11
          distribution: adopt

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Set Maven Home Variable
        run: |
          echo "M2_HOME=`mvn --version | grep -i "MAVEN HOME" | awk -F': ' '{print $NF}'`" >> $GITHUB_ENV

      - name: Check Maven Dependencies Versions
        run: |
          mvn versions:display-dependency-updates

      # Echo the client payload
      - name: Client Payload
        run: |
          echo ${{ github.event.client_payload.new_version }}
      
      # Looks for the property name given in the payload and updates to the new version also given in the payload
      - name: Update Dependencies Versions
        run: |
          mvn versions:set-property -Dproperty=${{ github.event.client_payload.property }} -DnewVersion=${{ github.event.client_payload.new_version }}
          cat pom.xml

      # This step utilizes the maven build-helper to increment the patch version
      - name: Update Pom Version
        run: |
          mvn build-helper:parse-version versions:set \
          -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion} \
          versions:commit
          cat pom.xml

      # Below, %an is 'author name' and %ae is 'author email'
      - name: Update Repo
        run: |
          echo ${{ github.repository }}
          echo ${{ github.workspace }}
          git config --global user.name "$(git log --format='%an' HEAD^!)"
          git config --global user.email "$(git log --format='%ae' HEAD^!)" 
          git fetch
          git pull
          git add . &&  git commit -m "Update Pom version" && git push

      # Storing this as a variable for use in the next job
      - name: Get Updated Project Version
        run: |
          echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

    # The output(s) here can be used in subsequent jobs
    outputs:
      VERSION: ${{ env.VERSION }}


  # This job will not trigger unless the previous job has completed successfully
  Create_Release:
    needs: Receive_Workflow_Trigger
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ needs.Receive_Workflow_Trigger.outputs.VERSION }}
          release_name: Release ${{ needs.Receive_Workflow_Trigger.outputs.VERSION }}
          body: |
            # Release: ${{ needs.Receive_Workflow_Trigger.outputs.VERSION }}
            - Updated ${{ github.event.client_payload.property }} dependency version to ${{ github.event.client_payload.new_version }}
          draft: false
          prerelease: false
